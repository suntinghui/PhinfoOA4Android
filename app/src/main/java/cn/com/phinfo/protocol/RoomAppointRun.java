package cn.com.phinfo.protocol;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Stack;import cn.com.phinfo.protocol.RoomAppointRun.RoomAppointItem;import com.alibaba.fastjson.annotation.JSONField;import com.heqifuhou.protocolbase.HttpResultBeanBase;import com.heqifuhou.protocolbase.QuickRunObjectBase;public class RoomAppointRun extends QuickRunObjectBase {	public RoomAppointRun(final String startTime, final String endTime) {		super(LURLInterface.GET_URL_ROOMAPPOINT_GETLIST(startTime, endTime),				null, RoomAppointResultBean.class);	}	public static class RoomAppointResultBean extends HttpResultBeanBase {		private List<RoomAppointItem> listData = new Stack<RoomAppointItem>();		public List<RoomAppointItem> getListData() {			return listData;		}		public void setListData(List<RoomAppointItem> listData) {			this.listData = listData;		}//		//是否在这个里面//		private List<RoomAppointItem> getTodayList(long time){//			List<RoomAppointItem> ls = new Stack<RoomAppointItem>();//			for(RoomAppointItem it:listData){//				if(it.isBetween(time)){//					ls.add(it);//				}//			}//			return ls;//		}		public HashMap<String,List<RoomAppointItem>> getTodayList(long time){			HashMap<String,List<RoomAppointItem>> has = new HashMap<String,List<RoomAppointItem>>();			for(RoomAppointItem it:listData){				if(it.isBetween(time)){					String key= it.getResourceId();					//如果没有包括要加一个					if(!has.containsKey(key)){						has.put(key, new Stack<RoomAppointItem>());					}					has.get(key).add(it);				}			}			return has;		}		@JSONField(serialize = false)		public HashMap<String,List<RoomAppointItem>> getTodaySortList(long time){			HashMap<String,List<RoomAppointItem>> has = getTodayList(time);			Iterator<Entry<String, List<RoomAppointItem>>> iter = has.entrySet().iterator();			while (iter.hasNext()) {				Map.Entry<String,List<RoomAppointItem>> entry = (Map.Entry<String,List<RoomAppointItem>>) iter.next();				List<RoomAppointItem> val = entry.getValue();				Collections.sort(val, new Comparator<RoomAppointItem>(){					@Override					public int compare(RoomAppointItem arg0, RoomAppointItem arg1) {						return (int) (arg0.getStartTime()-arg1.getStartTime());					}				});			}			return has;		}	}	public static class RoomAppointItem {		private String ResAppointmentId;// ":"83ca2d16-6fac-46f0-997b-a320efb1b857","		private String ResourceId;// ":"f5decd73-053c-45ad-a50f-e28bf86ea003","		private String ScheduledStart;// ":"2017/3/25 8:30:00","		private String ScheduledEnd;// ":"2017/3/25 14:00:00","		private String Subject;// ":"旁序列社招报名","		private String Description;// ":"","		private String StateCode;// ":"1","		private String StatusCode;// ":"0","		private String OwningUser;// ":"1ea4a897-838c-4de4-ad81-1dd668758182","		private String CreatedOn;// ":"2017/3/16 10:10:07","		private String CreatedBy;// ":"1ea4a897-838c-4de4-ad81-1dd668758182","		private String ModifiedOn;// ":"2017/3/20 11:34:43","		private String ModifiedBy;// ":"69cc083a-ef76-4821-a92f-4bbe0d4b343b","		private String OrganizationId;// ":"aa65721d-e6f5-4ac2-97c2-db9ca982aa49","		private String DeptId;// ":"","		private String HandleBy;// ":"","		private String Approve1;// ":""}		public String getResAppointmentId() {			return ResAppointmentId;		}		public void setResAppointmentId(String resAppointmentId) {			ResAppointmentId = resAppointmentId;		}		public String getResourceId() {			return ResourceId;		}		public void setResourceId(String resourceId) {			ResourceId = resourceId;		}		public String getScheduledStart() {			return ScheduledStart;		}		public void setScheduledStart(String scheduledStart) {			ScheduledStart = scheduledStart;		}		public String getScheduledEnd() {			return ScheduledEnd;		}		public void setScheduledEnd(String scheduledEnd) {			ScheduledEnd = scheduledEnd;		}		public String getSubject() {			return Subject;		}		public void setSubject(String subject) {			Subject = subject;		}		public String getDescription() {			return Description;		}		public void setDescription(String description) {			Description = description;		}		public String getStateCode() {			return StateCode;		}		public void setStateCode(String stateCode) {			StateCode = stateCode;		}		public String getStatusCode() {			return StatusCode;		}		public void setStatusCode(String statusCode) {			StatusCode = statusCode;		}		public String getOwningUser() {			return OwningUser;		}		public void setOwningUser(String owningUser) {			OwningUser = owningUser;		}		public String getCreatedOn() {			return CreatedOn;		}		public void setCreatedOn(String createdOn) {			CreatedOn = createdOn;		}		public String getCreatedBy() {			return CreatedBy;		}		public void setCreatedBy(String createdBy) {			CreatedBy = createdBy;		}		public String getModifiedOn() {			return ModifiedOn;		}		public void setModifiedOn(String modifiedOn) {			ModifiedOn = modifiedOn;		}		public String getModifiedBy() {			return ModifiedBy;		}		public void setModifiedBy(String modifiedBy) {			ModifiedBy = modifiedBy;		}		public String getOrganizationId() {			return OrganizationId;		}		public void setOrganizationId(String organizationId) {			OrganizationId = organizationId;		}		public String getDeptId() {			return DeptId;		}		public void setDeptId(String deptId) {			DeptId = deptId;		}		public String getHandleBy() {			return HandleBy;		}		public void setHandleBy(String handleBy) {			HandleBy = handleBy;		}		public String getApprove1() {			return Approve1;		}		public void setApprove1(String approve1) {			Approve1 = approve1;		}		@JSONField(serialize = false)		private long startTime = 0;		@JSONField(serialize = false)		private long endTime = 0;		@JSONField(serialize = false)		public boolean isBetween(long l) {			if (startTime == 0) {				startTime = getTime(ScheduledStart);			}			if (endTime == 0) {				endTime = getTime(ScheduledEnd);			}			if (l >= startTime && l <= endTime) {				return true;			}			return false;		}		@JSONField(serialize = false)		public long getStartTime(){			if (startTime == 0) {				startTime = getTime(ScheduledStart);			}			return startTime;		}		@JSONField(serialize = false)		private static long getTime(String date) {			try {				SimpleDateFormat sdf = new SimpleDateFormat(						"yyyy/M/d H:mm:ss");				Date d = sdf.parse(date);				Calendar ca = Calendar.getInstance();				ca.setTime(d);				ca.set(Calendar.HOUR_OF_DAY, 0);				ca.set(Calendar.MINUTE,0);				ca.set(Calendar.SECOND, 0);				return ca.getTime().getTime();			} catch (ParseException e) {				return 0;			}		}	}}