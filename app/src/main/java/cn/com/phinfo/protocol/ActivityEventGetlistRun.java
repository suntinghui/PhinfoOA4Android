package cn.com.phinfo.protocol;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Stack;import com.alibaba.fastjson.annotation.JSONField;import com.heqifuhou.ioscalendar.HDataItem;import com.heqifuhou.protocolbase.HttpResultBeanBase;import com.heqifuhou.protocolbase.QuickRunObjectBase;public class ActivityEventGetlistRun extends QuickRunObjectBase {	public ActivityEventGetlistRun(int pageNumber,String date) {		this(pageNumber,date,"");	}	public ActivityEventGetlistRun(int pageNumber,String date,String Search) {		super(LURLInterface.GET_URL_Activity_Event_GETLIST(pageNumber,date,Search),null,ActivityEventGetlistResultBean.class);	}	public static class ActivityEventGetlistResultBean extends HttpResultBeanBase{		private List<ActivityEventGetlistItem> listData = new Stack<ActivityEventGetlistItem>();		public List<ActivityEventGetlistItem> getListData() {			return listData;		}		public void setListData(List<ActivityEventGetlistItem> listData) {			this.listData = listData;		}	}	public static class ActivityEventGetlistItem{		private String id;		private String subject;		private String createdOn;		private String createdBy;		private String description;		private String location;		private String scheduledStart;		private String scheduledEnd;		private String calendarType;		private String displayStatus;		private boolean isAllDayEvent;		private String  owningUser;		private int reminderTime;		public String getId() {			return id;		}		public void setId(String id) {			this.id = id;		}		public String getSubject() {			return subject;		}		public void setSubject(String subject) {			this.subject = subject;		}		public String getCreatedOn() {			return createdOn;		}		public void setCreatedOn(String createdOn) {			this.createdOn = createdOn;		}		public String getCreatedBy() {			return createdBy;		}		public void setCreatedBy(String createdBy) {			this.createdBy = createdBy;		}		public String getDescription() {			return description;		}		public void setDescription(String description) {			this.description = description;		}		public String getLocation() {			return location;		}		public void setLocation(String location) {			this.location = location;		}		public String getScheduledStart() {			return scheduledStart;		}		public void setScheduledStart(String scheduledStart) {			this.scheduledStart = scheduledStart;		}		public String getScheduledEnd() {			return scheduledEnd;		}		public void setScheduledEnd(String scheduledEnd) {			this.scheduledEnd = scheduledEnd;		}		public String getCalendarType() {			return calendarType;		}		public void setCalendarType(String calendarType) {			this.calendarType = calendarType;		}		public String getDisplayStatus() {			return displayStatus;		}		public void setDisplayStatus(String displayStatus) {			this.displayStatus = displayStatus;		}		public boolean getAllDayEvent() {			return isAllDayEvent;		}		public void setAllDayEvent(boolean isAllDayEvent) {			this.isAllDayEvent = isAllDayEvent;		}		public String getOwningUser() {			return owningUser;		}		public void setOwningUser(String owningUser) {			this.owningUser = owningUser;		}		public int getReminderTime() {			return reminderTime;		}		public void setReminderTime(int reminderTime) {			this.reminderTime = reminderTime;		}		@JSONField(serialize=false)		private long startTime=0,endTime=0;		public boolean isBetween(long l){			if(startTime==0){				startTime =getTime(scheduledStart);			}			if(endTime == 0){				endTime = getTime(scheduledEnd);			}			if(l>=startTime&&l<=endTime){				return true;			}			return false;		}		@JSONField(serialize=false)		private static long getTime(String date){			try {				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");				Date d = sdf.parse(date);				return d.getTime();			} catch (ParseException e) {				return 0;			}		}				@JSONField(serialize=false)		public String getDate2Time(HDataItem it){			 //如果就是当天			 Calendar startTimeCalendar = Calendar.getInstance();			 startTimeCalendar.setTime(new Date(getTime(scheduledStart)));			 Calendar endCalendar = Calendar.getInstance();			 endCalendar.setTime(new Date(getTime(scheduledEnd)));			 if(startTimeCalendar.get(Calendar.YEAR)==endCalendar.get(Calendar.YEAR)){				 if(startTimeCalendar.get(Calendar.MONTH)==endCalendar.get(Calendar.MONTH)){					 if(startTimeCalendar.get(Calendar.DAY_OF_MONTH)==endCalendar.get(Calendar.DAY_OF_MONTH)){						 int h = startTimeCalendar.get(Calendar.HOUR_OF_DAY);						 int m = startTimeCalendar.get(Calendar.MINUTE);						 return String.format("%02d:%02d",h,m);					 }				 }			 }			//如果跨天			if(isBetween(it.getTime())){				return String.format("%02d:%02d",8,0);			}						return "";		}	}}