package cn.com.phinfo.adapter;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Stack;import android.app.Activity;import android.content.Intent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.BaseExpandableListAdapter;import android.widget.TextView;import cn.com.phinfo.oaact.MeetingOrderCreateAct;import cn.com.phinfo.oaact.R;import cn.com.phinfo.protocol.RoomAppointRun.RoomAppointItem;import cn.com.phinfo.protocol.RoomListRun.RoomListItem;import cn.com.phinfo.protocol.RoomListRun.RoomListResultBean;import com.alibaba.fastjson.JSON;public class MeetingCalendarListAdapter extends BaseExpandableListAdapter{	private Activity act;	public MeetingCalendarListAdapter(Activity act){		this.act = act;	}	class Holder{		public TextView title,text;	}	private HashMap<String,List<RoomAppointItem>> hasmap = new HashMap<String,List<RoomAppointItem>>();	private List<String> mapKeyList = new Stack<String>();  	private RoomListResultBean roomListBean;	@Override	public RoomAppointItem getChild(int arg0, int arg1) {		return hasmap.get(mapKeyList.get(arg0)).get(arg1);	}	@Override	public long getChildId(int arg0, int arg1) {		return 0;	}	@Override	public View getChildView(int arg0, int arg1, boolean arg2, View arg3,			ViewGroup arg4) {		Holder holder;		if(arg3==null){			holder = new Holder();			arg3 = LayoutInflater.from(arg4.getContext()).inflate(R.layout.adapter_meeting_item,					null);			holder.text = (TextView) arg3.findViewById(R.id.text);			holder.title = (TextView) arg3.findViewById(R.id.title);			arg3.setTag(holder);			}else{			holder = (Holder) arg3.getTag();		}		RoomAppointItem it = getChild(arg0,arg1);		holder.text.setText(it.getScheduledStart());		holder.title.setText(it.getSubject());		return arg3;	}	@Override	public int getChildrenCount(int arg0) {		return hasmap.get(mapKeyList.get(arg0)).size();	}	@Override	public String getGroup(int arg0) {		return mapKeyList.get(arg0);	}	@Override	public int getGroupCount() {		if(mapKeyList==null){			return 0;		}		return mapKeyList.size();	}	@Override	public long getGroupId(int arg0) {		return 0;	}	@Override	public View getGroupView(int arg0, boolean arg1, View arg2, ViewGroup arg3) {		GroupHolder holder=null;		if(arg2==null){			holder = new GroupHolder();			arg2 = LayoutInflater.from(arg3.getContext()).inflate(R.layout.adapter_meeting_group_item,					null);			holder.txt = (TextView) arg2.findViewById(R.id.text);			holder.icon = arg2.findViewById(R.id.icon);			arg2.setTag(holder);		}else{			holder = (GroupHolder) arg2.getTag();		}		String value = roomListBean.getNameByKey(getGroup(arg0));		holder.txt.setText(value);				holder.icon.setTag(arg0);		holder.icon.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				int nIdx = (int) arg0.getTag();				RoomListItem it = getGroupMeeting(nIdx);				Intent intent = new Intent(act,MeetingOrderCreateAct.class);				intent.putExtra("RoomListItem",JSON.toJSONString(it));				intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);				act.startActivity(intent);			}		});		return arg2;	}	class GroupHolder{		TextView txt;		View icon;	}	@Override	public boolean hasStableIds() {		return false;	}	@Override	public boolean isChildSelectable(int arg0, int arg1) {		return true;	}			public void replace(HashMap<String,List<RoomAppointItem>> has,RoomListResultBean roomListBean){		if(roomListBean==null){			hasmap.clear();			mapKeyList.clear();		}else{			hasmap = has;			if(hasmap==null){				hasmap = new HashMap<String,List<RoomAppointItem>>();			}			//将会议室补进去			List<RoomListItem> listData  = roomListBean.getListData();			for(RoomListItem it:listData){				String key = it.getResourceOrgId();				if(!hasmap.containsKey(key)){					hasmap.put(key, new Stack<RoomAppointItem>());				}			}			mapKeyList = new ArrayList<String>(hasmap.keySet());			this.roomListBean = roomListBean;		}		this.notifyDataSetChanged();	}		public void tryRemove(Object it){		boolean bFound = false;		Iterator<Entry<String, List<RoomAppointItem>>> iter = hasmap.entrySet().iterator();		while (iter.hasNext()) {			Map.Entry<String,List<RoomAppointItem>> entry = (Map.Entry<String,List<RoomAppointItem>>) iter.next();			List<RoomAppointItem> val = entry.getValue();			if(val.contains(it)){				val.remove(it);				if(val.isEmpty()){					String key = entry.getKey();					hasmap.remove(key);					bFound = true;				}				break;			}		}		if(bFound){			this.notifyDataSetChanged();		}	}	public RoomListItem getGroupMeeting(int pos){		String key = getGroup(pos);		return roomListBean.getRoomListItemByKey(key);	}}