package com.heqifuhou.actbase;import java.util.List;import java.util.Stack;import com.heqifuhou.protocolbase.HttpThread;import com.heqifuhou.protocolbase.HttpThread.IHttpRunnable;import com.heqifuhou.protocolbase.HttpThread.IThreadResultListener;public class HttpThreadListUtils implements IHttpThreadListUtils{	private final List<HttpThread> httpThreadList = new Stack<HttpThread>();	private IThreadResultListener listener = null;	public HttpThreadListUtils(IThreadResultListener listener){		this.listener = listener;	}	public  boolean isRequest(int id) {		HttpThread t = getThreadByID(id);		if (t != null) {			return t.isRuning(id);		}		return false;	}	public  HttpThread quickHttpRequest(int id, IHttpRunnable runnable){		return quickHttpRequest(id,runnable,null,false);	}	public  HttpThread quickHttpRequest(int id, IHttpRunnable runnable,Object requestObj){		return quickHttpRequest(id,runnable,requestObj,false);	}	public  HttpThread quickHttpRequest(int id, IHttpRunnable runnable,Object requestObj,boolean isRecy) {		return this.quickHttpRequest(id, runnable,listener,requestObj,isRecy);	}		public HttpThread quickHttpRequest(int id, IHttpRunnable runnable, IThreadResultListener listener,Object requestObj,boolean isRecy)	{		if(isRecy){			HttpThread t = getThreadByID(id);			if (t != null && t.isRuning(id)) {				return t;			}		}		HttpThread thread = HttpThread.quickHttpRequest(id, runnable,listener,requestObj);		httpThreadList.add(thread);		return thread;	}			public  void removeHttpThread(int id) {		HttpThread t = getThreadByID(id);		if (t != null) {			httpThreadList.remove(t);		}	}	public void removeAndStopHttpThread(int id) {		HttpThread t = getThreadByID(id);		if (t != null) {			t.stopRuning();			httpThreadList.remove(t);		}	}	public void clearAndStopHttpThread() {		for (HttpThread t : httpThreadList) {			t.stopRuning();		}		httpThreadList.clear();	}	public HttpThread getThreadByID(int id) {		for (HttpThread t : httpThreadList) {			if (t.getID() == id) {				return t;			}		}		return null;	}}