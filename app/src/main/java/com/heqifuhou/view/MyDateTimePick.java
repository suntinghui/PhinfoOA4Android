package com.heqifuhou.view;import java.util.Calendar;import java.util.TimeZone;import android.app.Activity;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.DatePicker;import android.widget.DatePicker.OnDateChangedListener;import android.widget.TimePicker;import android.widget.TimePicker.OnTimeChangedListener;import cn.com.phinfo.oaact.R;public class MyDateTimePick extends MyDialog implements OnClickListener {	private DatePicker datePicker;	private TimePicker timePicker;	private int year;	private int monthOfYear;	private int dayOfMonth;	private int HourOfDay;	private int Minute;	private OnDateTimePickListener callBack;	private int nResultYear,nResultMonthOfYear,nResultDayOfMonth,nResultHourOfDay,nResultMinute;	public MyDateTimePick(Activity act, OnDateTimePickListener callBack) {		this(act,callBack,-1,-1,-1,-1,-1);	}	public MyDateTimePick(Activity act, OnDateTimePickListener callBack, int year,			int monthOfYear, int dayOfMonth,int HourOfDay,int Minute) {		super(act);		this.year = year;		this.monthOfYear = monthOfYear;		this.dayOfMonth = dayOfMonth;		this.HourOfDay = HourOfDay;		this.Minute = Minute;		this.callBack = callBack;	}	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		this.setContentView(R.layout.mydatepicktime_dialog_popupwindows);		datePicker = (DatePicker) this.findViewById(R.id.new_act_date_picker);		timePicker = (TimePicker) this.findViewById(R.id.new_act_time_picker);		this.findViewById(R.id.item_popupwindows_cancel).setOnClickListener(				this);		this.findViewById(R.id.item_popupwindows_ok).setOnClickListener(				this);		if (year < 0 || monthOfYear < 0 || dayOfMonth < 0||HourOfDay<0||Minute<0) {			Calendar calendar = Calendar.getInstance(TimeZone.getDefault());			year = calendar.get(Calendar.YEAR);			monthOfYear = calendar.get(Calendar.MONTH);			dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);						HourOfDay=calendar.get(Calendar.HOUR_OF_DAY);  			Minute=calendar.get(Calendar.MINUTE);  		}		this.nResultYear = year;		this.nResultMonthOfYear = monthOfYear;		this.nResultDayOfMonth = dayOfMonth;		this.nResultHourOfDay = HourOfDay;		this.nResultMinute = Minute;		datePicker.init(year, monthOfYear, dayOfMonth,				new OnDateChangedListener() {					@Override					public void onDateChanged(DatePicker view, int year,							int monthOfYear, int dayOfMonth) {						nResultYear = year;						nResultMonthOfYear = monthOfYear;						nResultDayOfMonth = dayOfMonth;					}				});		timePicker.setIs24HourView(true);        //设置时分初值为当前时刻  		timePicker.setCurrentHour(HourOfDay);  		timePicker.setCurrentMinute(Minute); 		timePicker.setOnTimeChangedListener(new OnTimeChangedListener(){			@Override			public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {				if(nResultHourOfDay!=hourOfDay){					nResultHourOfDay = hourOfDay;				}				if(nResultMinute!=minute){					nResultMinute = minute;				}			}		});  	}	@Override	public void onClick(View arg0) {		switch (arg0.getId()) {		case R.id.item_popupwindows_ok:			if (callBack != null) {				callBack.onDateTimePick(nResultYear, nResultMonthOfYear,						nResultDayOfMonth,nResultHourOfDay,nResultMinute);			}			break;		case R.id.item_popupwindows_cancel:			break;		default:		}		dismiss();	}		public interface OnDateTimePickListener{	    void  onDateTimePick(int nResultYear, int nResultMonthOfYear,				int nResultDayOfMonth,int nResultHourOfDay,int nResultMinute);	}}